{"version":3,"sources":["AnimatedHelper.ts"],"names":["Easing","interpolate","useDerivedValue","withTiming","useSharedTransition","state","config","duration","easing","bezier","withSharedTransition","value","sharedTiming","toValue","callBack","Object","assign","useInterpolate","progress","input","output","type","sharedRound","Math","round","sharedEq","v1","v2"],"mappings":"AAAA;AACA,SAEEA,MAFF,EAGEC,WAHF,EAIEC,eAJF,EAKEC,UALF,QAOO,yBAPP;AASA,OAAO,MAAMC,mBAAmB,GAAG,CACjCC,KADiC,EAEjCC,MAAwB,GAAG;AACzBC,EAAAA,QAAQ,EAAE,GADe;AAEzBC,EAAAA,MAAM,EAAER,MAAM,CAACS,MAAP,CAAc,IAAd,EAAoB,IAApB,EAA0B,CAA1B,EAA6B,CAA7B;AAFiB,CAFM,KAMA;AACjC;;AACA,SAAOP,eAAe,CAAC,MACrBG,KAAK,GAAGF,UAAU,CAAC,CAAD,EAAIG,MAAJ,CAAb,GAA2BH,UAAU,CAAC,CAAD,EAAIG,MAAJ,CADtB,CAAtB;AAGD,CAXM;AAYP,OAAO,MAAMI,oBAAoB,GAAG,CAClCC,KADkC,EAElCL,MAAwB,GAAG;AACzBC,EAAAA,QAAQ,EAAE,GADe;AAEzBC,EAAAA,MAAM,EAAER,MAAM,CAACS,MAAP,CAAc,CAAd,EAAiB,IAAjB,EAAuB,IAAvB,EAA6B,CAA7B;AAFiB,CAFO,KAMD;AACjC;;AACA,SAAOP,eAAe,CAAC,MACrBS,KAAK,CAACA,KAAN,GAAcR,UAAU,CAAC,CAAD,EAAIG,MAAJ,CAAxB,GAAsCH,UAAU,CAAC,CAAD,EAAIG,MAAJ,CAD5B,CAAtB;AAGD,CAXM;AAYP,OAAO,MAAMM,YAAY,GAAG,CAC1BC,OAD0B,EAE1BP,MAF0B,EAG1BQ,QAH0B,KAIvB;AACH;;AACA,SAAOX,UAAU,CACfU,OADe,EAEfE,MAAM,CAACC,MAAP,CACE;AACET,IAAAA,QAAQ,EAAE,GADZ;AAEEC,IAAAA,MAAM,EAAER,MAAM,CAACS,MAAP,CAAc,IAAd,EAAoB,CAApB,EAAuB,IAAvB,EAA6B,CAA7B;AAFV,GADF,EAKEH,MALF,CAFe,EASfQ,QATe,CAAjB;AAWD,CAjBM;AAkBP,OAAO,MAAMG,cAAc,GAAG,CAC5BC,QAD4B,EAE5BC,KAF4B,EAG5BC,MAH4B,EAI5BC,IAJ4B,KAKzBnB,eAAe,CAAC,MAAMD,WAAW,CAACiB,QAAQ,CAACP,KAAV,EAAiBQ,KAAjB,EAAwBC,MAAxB,EAAgCC,IAAhC,CAAlB,CALb;AAMP,OAAO,MAAMC,WAAW,GAAIX,KAAD,IAAmB;AAC5C;;AACA,SAAOY,IAAI,CAACC,KAAL,CAAWb,KAAX,CAAP;AACD,CAHM;AAIP,OAAO,MAAMc,QAAQ,GAAG,CACtBC,EADsB,EAEtBC,EAFsB,KAGnB;AACH;;AACA,SAAOzB,eAAe,CAAC,MAAMwB,EAAE,CAACf,KAAH,KAAagB,EAAE,CAAChB,KAAvB,CAAtB;AACD,CANM","sourcesContent":["/* eslint-disable react-hooks/rules-of-hooks */\nimport Animated, {\n  AnimationCallback,\n  Easing,\n  interpolate,\n  useDerivedValue,\n  withTiming,\n  WithTimingConfig,\n} from 'react-native-reanimated';\n\nexport const useSharedTransition = (\n  state: boolean,\n  config: WithTimingConfig = {\n    duration: 500,\n    easing: Easing.bezier(0.33, 0.01, 0, 1),\n  }\n): Animated.SharedValue<number> => {\n  'worklet';\n  return useDerivedValue(() =>\n    state ? withTiming(1, config) : withTiming(0, config)\n  );\n};\nexport const withSharedTransition = (\n  value: Animated.SharedValue<boolean>,\n  config: WithTimingConfig = {\n    duration: 500,\n    easing: Easing.bezier(0, 0.55, 0.45, 1),\n  }\n): Animated.SharedValue<number> => {\n  'worklet';\n  return useDerivedValue(() =>\n    value.value ? withTiming(1, config) : withTiming(0, config)\n  );\n};\nexport const sharedTiming = (\n  toValue: number,\n  config?: WithTimingConfig,\n  callBack?: AnimationCallback\n) => {\n  'worklet';\n  return withTiming(\n    toValue,\n    Object.assign(\n      {\n        duration: 500,\n        easing: Easing.bezier(0.22, 1, 0.36, 1),\n      },\n      config\n    ),\n    callBack\n  );\n};\nexport const useInterpolate = (\n  progress: Animated.SharedValue<number>,\n  input: number[],\n  output: number[],\n  type?: Animated.Extrapolate\n) => useDerivedValue(() => interpolate(progress.value, input, output, type));\nexport const sharedRound = (value: number) => {\n  'worklet';\n  return Math.round(value);\n};\nexport const sharedEq = (\n  v1: Animated.SharedValue<number | string>,\n  v2: Animated.SharedValue<number | string>\n) => {\n  'worklet';\n  return useDerivedValue(() => v1.value === v2.value);\n};\n"]}