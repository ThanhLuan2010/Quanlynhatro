{"version":3,"sources":["ButtonTabItem.tsx"],"names":["React","memo","useMemo","useCallback","View","TouchableOpacity","Animated","useDerivedValue","useAnimatedStyle","useAnimatedReaction","useSharedValue","isEqual","sharedRound","sharedTiming","useInterpolate","styles","useSafeAreaInsets","ButtonTabItemComponent","props","index","selectedIndex","countTab","indexAnimated","width","icon","renderTitle","title","titleShown","focused","bottom","isActive","value","progress","opacity","translateY","scale","_onPress","result","prevValue","containerIconStyle","justifyContent","alignItems","transform","titleStyle","buttonTab","paddingBottom","renderIcon","_renderTitle","showTitle","ButtonTab"],"mappings":"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","sourcesContent":["import React, { memo, useMemo, useCallback } from 'react';\nimport { View, TouchableOpacity } from 'react-native';\nimport Animated, {\n  useDerivedValue,\n  useAnimatedStyle,\n  useAnimatedReaction,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport isEqual from 'react-fast-compare';\n\nimport type { TabBarItemProps } from '../../types';\nimport {\n  sharedRound,\n  sharedTiming,\n  useInterpolate,\n} from '../../AnimatedHelper';\n\nimport { styles } from './style';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\n\nconst ButtonTabItemComponent = (props: TabBarItemProps) => {\n  // props\n  const {\n    index,\n    selectedIndex,\n    countTab,\n    indexAnimated,\n    width,\n    icon,\n    renderTitle,\n    title,\n    titleShown,\n    focused,\n  } = props;\n  // reanimated\n  const { bottom } = useSafeAreaInsets();\n  const isActive = useDerivedValue(() => sharedRound(indexAnimated.value));\n  const progress = useSharedValue(0);\n\n  const opacity = useInterpolate(progress, [0, 0.8], [1, 0]);\n  const translateY = useInterpolate(progress, [0, 0.4], [0, 10]);\n  const scale = useInterpolate(progress, [0, 1], [1, 0.5]);\n\n  // func\n  const _onPress = useCallback(() => {\n    selectedIndex.value = index;\n  }, [index, selectedIndex]);\n\n  // effect\n  useAnimatedReaction(\n    () => isActive.value === index,\n    (result, prevValue) => {\n      if (result !== prevValue) {\n        progress.value = sharedTiming(result ? 1 : 0);\n      }\n    }\n  );\n\n  // reanimated style\n  const containerIconStyle = useAnimatedStyle(() => ({\n    opacity: opacity.value,\n    justifyContent: 'center',\n    alignItems: 'center',\n    transform: [\n      {\n        translateY: translateY.value,\n      },\n    ],\n  }));\n\n  const titleStyle = useAnimatedStyle(() => ({\n    transform: [{ scale: scale.value }],\n  }));\n\n  const buttonTab = useMemo(\n    () => ({\n      width: width / countTab,\n      paddingBottom: bottom,\n    }),\n    [width, countTab, bottom]\n  );\n\n  // render\n  const renderIcon = useCallback(() => {\n    return icon({ progress, focused });\n  }, [focused, icon, progress]);\n\n  const _renderTitle = useCallback(() => {\n    return renderTitle?.({ progress, focused, title: title ?? '' });\n  }, [focused, progress, renderTitle, title]);\n\n  const showTitle = useCallback(() => {\n    if (typeof renderTitle === 'function') {\n      return _renderTitle();\n    }\n    return (\n      <Animated.Text\n        style={[styles.title, titleStyle]}\n        allowFontScaling={false}\n        numberOfLines={1}\n      >\n        {title ?? ''}\n      </Animated.Text>\n    );\n  }, [_renderTitle, renderTitle, title, titleStyle]);\n\n  // render\n  return (\n    <TouchableOpacity onPress={_onPress} activeOpacity={0.7}>\n      <View style={[styles.buttonTab, buttonTab]}>\n        <Animated.View style={[containerIconStyle]}>\n          {renderIcon()}\n          {titleShown ? showTitle() : null}\n        </Animated.View>\n      </View>\n    </TouchableOpacity>\n  );\n};\n\nexport const ButtonTab = memo(ButtonTabItemComponent, isEqual);\n"]}