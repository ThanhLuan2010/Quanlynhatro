{"version":3,"sources":["IconDot.tsx"],"names":["React","memo","isEqual","Animated","useAnimatedReaction","useAnimatedStyle","useSharedValue","sharedTiming","useInterpolate","IconDotComponent","props","index","selectedIndex","children","progress","value","result","prevValue","opacity","scale","style","position","transform","IconDot"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,QAA4B,OAA5B;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,QAAP,IACEC,mBADF,EAEEC,gBAFF,EAGEC,cAHF,QAIO,yBAJP;AAKA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,sBAA7C;;AAQA,MAAMC,gBAAgB,GAAIC,KAAD,IAAyB;AAChD;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,aAAT;AAAwBC,IAAAA;AAAxB,MAAqCH,KAA3C,CAFgD,CAIhD;;AACA,QAAMI,QAAQ,GAAGR,cAAc,CAAC,CAAD,CAA/B;AACAF,EAAAA,mBAAmB,CACjB,MAAMQ,aAAa,CAACG,KAAd,KAAwBJ,KADb,EAEjB,CAACK,MAAD,EAASC,SAAT,KAAuB;AACrB,QAAID,MAAM,KAAKC,SAAf,EAA0B;AACxBH,MAAAA,QAAQ,CAACC,KAAT,GAAiBR,YAAY,CAACS,MAAM,GAAG,CAAH,GAAO,CAAd,CAA7B;AACD;AACF,GANgB,CAAnB;AAQA,QAAME,OAAO,GAAGV,cAAc,CAACM,QAAD,EAAW,CAAC,CAAD,EAAI,GAAJ,EAAS,CAAT,CAAX,EAAwB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAxB,CAA9B;AACA,QAAMK,KAAK,GAAGX,cAAc,CAACM,QAAD,EAAW,CAAC,CAAD,EAAI,CAAJ,CAAX,EAAmB,CAAC,GAAD,EAAM,CAAN,CAAnB,CAA5B,CAfgD,CAiBhD;;AACA,QAAMM,KAAK,GAAGf,gBAAgB,CAAC,OAAO;AACpCgB,IAAAA,QAAQ,EAAE,UAD0B;AAEpCH,IAAAA,OAAO,EAAEA,OAAO,CAACH,KAFmB;AAGpCO,IAAAA,SAAS,EAAE,CAAC;AAAEH,MAAAA,KAAK,EAAEA,KAAK,CAACJ;AAAf,KAAD;AAHyB,GAAP,CAAD,CAA9B,CAlBgD,CAwBhD;;AACA,sBAAO,oBAAC,QAAD,CAAU,IAAV;AAAe,IAAA,KAAK,EAAE,CAACK,KAAD;AAAtB,KAAgCP,QAAhC,CAAP;AACD,CA1BD;;AA4BA,OAAO,MAAMU,OAAO,gBAAGtB,IAAI,CAACQ,gBAAD,EAAmBP,OAAnB,CAApB","sourcesContent":["import React, { memo } from 'react';\nimport isEqual from 'react-fast-compare';\nimport Animated, {\n  useAnimatedReaction,\n  useAnimatedStyle,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport { sharedTiming, useInterpolate } from '../../AnimatedHelper';\n\ninterface IconDotProps {\n  index: number;\n  selectedIndex: Animated.SharedValue<number>;\n  children: React.ReactNode;\n}\n\nconst IconDotComponent = (props: IconDotProps) => {\n  // props\n  const { index, selectedIndex, children } = props;\n\n  // reanimated\n  const progress = useSharedValue(0);\n  useAnimatedReaction(\n    () => selectedIndex.value === index,\n    (result, prevValue) => {\n      if (result !== prevValue) {\n        progress.value = sharedTiming(result ? 1 : 0);\n      }\n    }\n  );\n  const opacity = useInterpolate(progress, [0, 0.6, 1], [0, 0, 1]);\n  const scale = useInterpolate(progress, [0, 1], [0.2, 1]);\n\n  // reanimated style\n  const style = useAnimatedStyle(() => ({\n    position: 'absolute',\n    opacity: opacity.value,\n    transform: [{ scale: scale.value }],\n  }));\n\n  // render\n  return <Animated.View style={[style]}>{children}</Animated.View>;\n};\n\nexport const IconDot = memo(IconDotComponent, isEqual);\n"]}