{"version":3,"sources":["Dot.tsx"],"names":["React","memo","useMemo","isEqual","Animated","useAnimatedStyle","useSafeAreaInsets","useInterpolate","HEIGHT_HOLE","IconDot","styles","DotComponent","props","selectedIndex","routes","progress","width","dotColor","dotSize","barHeight","isRtl","navigationIndex","bottom","inputRange","map","_","index","outputRange","length","translateX","translateY","opacity","iconContainerStyle","value","justifyContent","alignItems","dotStyle","backgroundColor","height","borderRadius","transform","dot","icon","focused","Dot"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { memo, useMemo } from 'react';\nimport isEqual from 'react-fast-compare';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { useInterpolate } from '../../AnimatedHelper';\nimport type { DotProps } from '../../types';\nimport { HEIGHT_HOLE } from '../constant';\nimport { IconDot } from './IconDot';\nimport { styles } from './style';\n\nconst DotComponent = (props: DotProps) => {\n  // props\n  const {\n    selectedIndex,\n    routes,\n    progress,\n    width,\n    dotColor,\n    dotSize,\n    barHeight,\n    isRtl,\n    navigationIndex,\n  } = props;\n\n  // const\n  const { bottom } = useSafeAreaInsets();\n  const inputRange = useMemo(\n    () => routes.map((_: any, index: number) => index),\n    [routes]\n  );\n  const outputRange = useMemo(\n    () =>\n      isRtl\n        ? routes.map(\n            (_: any, index: number) =>\n              -(\n                (index * width) / routes.length +\n                width / routes.length / 2 -\n                dotSize / 2\n              )\n          )\n        : routes.map(\n            (_: any, index: number) =>\n              (index * width) / routes.length +\n              width / routes.length / 2 -\n              dotSize / 2\n          ),\n    [isRtl, routes, width, dotSize]\n  );\n\n  // reanimated\n  const translateX = useInterpolate(selectedIndex, inputRange, outputRange);\n  const translateY = useInterpolate(\n    progress,\n    [0, 1],\n    [15 - bottom, -(barHeight - HEIGHT_HOLE + 5)]\n  );\n\n  const opacity = useInterpolate(progress, [0, 1], [0.2, 1]);\n\n  // reanimated style\n  const iconContainerStyle = useAnimatedStyle(() => ({\n    opacity: opacity.value,\n    justifyContent: 'center',\n    alignItems: 'center',\n  }));\n\n  const dotStyle = useAnimatedStyle(() => ({\n    width: dotSize,\n    backgroundColor: dotColor,\n    height: dotSize,\n    bottom: 0,\n    borderRadius: dotSize / 2,\n    transform: [\n      { translateX: translateX.value },\n      { translateY: translateY.value },\n    ],\n  }));\n\n  // render\n  return (\n    <Animated.View style={[styles.dot, dotStyle]}>\n      <Animated.View style={iconContainerStyle}>\n        {routes.map(({ icon }, index: number) => (\n          <IconDot key={index} index={index} selectedIndex={selectedIndex}>\n            {icon({ progress, focused: navigationIndex === index })}\n          </IconDot>\n        ))}\n      </Animated.View>\n    </Animated.View>\n  );\n};\n\nexport const Dot = memo(DotComponent, isEqual);\n"]}