{"version":3,"sources":["CurvedTabBar.tsx"],"names":["AnimatedPath","Animated","createAnimatedComponent","Path","CurvedTabBarComponent","props","routes","selectedIndex","barWidth","duration","dotColor","tabBarColor","titleShown","isRtl","navigationIndex","dotSize","SIZE_DOT","barHeight","TAB_BAR_HEIGHT","bottom","width","actualBarWidth","widthTab","length","inputRange","map","_","index","reverse","outputRange","actualBarHeight","indexAnimated","value","renderButtonTab","key","title","configs","progress","xPath","pathProps","centerHoleX","d","HEIGHT_HOLE","containerStyle","height","rowTab","styles","container","svg","CurvedTabBar","isEqual"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { memo, useCallback, useMemo } from 'react';\nimport isEqual from 'react-fast-compare';\nimport { StyleProp, View, ViewStyle } from 'react-native';\nimport Animated, {\n  useAnimatedProps,\n  useDerivedValue,\n} from 'react-native-reanimated';\nimport {\n  useSafeAreaFrame,\n  useSafeAreaInsets,\n} from 'react-native-safe-area-context';\nimport Svg, { Path, PathProps } from 'react-native-svg';\nimport {\n  sharedEq,\n  sharedTiming,\n  useInterpolate,\n  withSharedTransition,\n} from '../AnimatedHelper';\nimport { RNShadow } from '../RNShadow';\nimport type { TabBarViewProps, TabRoute } from '../types';\nimport { HEIGHT_HOLE, TAB_BAR_HEIGHT } from './constant';\nimport { ButtonTab } from './item/ButtonTabItem';\nimport { Dot } from './item/Dot';\nimport { styles } from './style';\n\nconst AnimatedPath = Animated.createAnimatedComponent(Path);\n\nconst CurvedTabBarComponent = (props: TabBarViewProps) => {\n  // props\n  const {\n    routes,\n    selectedIndex,\n    barWidth,\n    duration,\n    dotColor,\n    tabBarColor,\n    titleShown,\n    isRtl,\n    navigationIndex,\n    dotSize: SIZE_DOT,\n    barHeight = TAB_BAR_HEIGHT,\n  } = props;\n  // state\n  const { bottom } = useSafeAreaInsets();\n  const { width } = useSafeAreaFrame();\n  const actualBarWidth = useMemo<number>(\n    () => barWidth || width,\n    [barWidth, width]\n  );\n  const widthTab = useMemo(\n    () => actualBarWidth / routes.length,\n    [routes, actualBarWidth]\n  );\n  const inputRange = useMemo(\n    () =>\n      isRtl\n        ? routes.map((_: any, index: number) => index).reverse()\n        : routes.map((_: any, index: number) => index),\n    [isRtl, routes]\n  );\n\n  const outputRange = useMemo(\n    () =>\n      routes.map(\n        (_: any, index: number) => (index / routes.length) * actualBarWidth\n      ),\n    [routes, actualBarWidth]\n  );\n  const actualBarHeight = useMemo<number>(\n    () => barHeight + bottom,\n    [barHeight, bottom]\n  );\n  const indexAnimated = useDerivedValue(() =>\n    sharedTiming(selectedIndex.value, { duration })\n  );\n\n  // func\n  const renderButtonTab = useCallback(\n    ({ key, title, ...configs }: TabRoute, index: number) => {\n      return (\n        <ButtonTab\n          focused={index === selectedIndex.value}\n          width={actualBarWidth}\n          key={key}\n          title={title}\n          titleShown={titleShown}\n          indexAnimated={indexAnimated}\n          countTab={routes.length}\n          selectedIndex={selectedIndex}\n          index={index}\n          {...configs}\n        />\n      );\n    },\n    [indexAnimated, routes.length, selectedIndex, titleShown, actualBarWidth]\n  );\n\n  // reanimated\n\n  const progress = withSharedTransition(sharedEq(selectedIndex, indexAnimated));\n\n  const xPath = useInterpolate(indexAnimated, inputRange, outputRange);\n\n  // path\n  const pathProps = useAnimatedProps<PathProps>(() => {\n    const centerHoleX = xPath.value + widthTab / 2;\n    return {\n      d: `M0,0 L${centerHoleX - SIZE_DOT},0\n      C${centerHoleX - SIZE_DOT * 0.5},0 ${\n        centerHoleX - SIZE_DOT * 0.75\n      },${HEIGHT_HOLE} ${centerHoleX},${HEIGHT_HOLE} \n      C${centerHoleX + SIZE_DOT * 0.75},${HEIGHT_HOLE} ${\n        centerHoleX + SIZE_DOT * 0.5\n      },0 ${centerHoleX + SIZE_DOT} 0 \n      L${actualBarWidth * 2},0 L ${\n        actualBarWidth * 2\n      },${actualBarHeight} L 0,${actualBarHeight} Z\n      `,\n    };\n  }, [actualBarWidth, widthTab, SIZE_DOT, actualBarHeight]);\n\n  // style\n  const containerStyle = useMemo<StyleProp<ViewStyle>>(\n    () => [\n      {\n        height: actualBarHeight,\n        width: actualBarWidth,\n      },\n    ],\n    [actualBarHeight, actualBarWidth]\n  );\n  const rowTab = useMemo<StyleProp<ViewStyle>>(\n    () => [\n      {\n        width: actualBarWidth,\n        height: actualBarHeight,\n      },\n    ],\n    [actualBarHeight, actualBarWidth]\n  );\n\n  return (\n    <>\n      <RNShadow style={[styles.container, containerStyle]}>\n        <Svg\n          width={actualBarWidth}\n          height={actualBarHeight}\n          style={[styles.svg]}\n        >\n          <AnimatedPath\n            animatedProps={pathProps}\n            translateY={3}\n            fill={tabBarColor}\n            stroke={'transparent'}\n            strokeWidth={0}\n          />\n        </Svg>\n      </RNShadow>\n      <View style={[styles.rowTab, rowTab]}>\n        <Dot\n          navigationIndex={navigationIndex}\n          isRtl={isRtl}\n          dotColor={dotColor}\n          dotSize={SIZE_DOT}\n          barHeight={actualBarHeight}\n          width={actualBarWidth}\n          selectedIndex={indexAnimated}\n          routes={routes}\n          progress={progress}\n        />\n        {routes.map(renderButtonTab)}\n      </View>\n    </>\n  );\n};\n\nexport const CurvedTabBar = memo(CurvedTabBarComponent, isEqual);\n"]}