{"version":3,"sources":["Dot.tsx"],"names":["DotComponent","props","selectedIndex","routes","progress","width","dotColor","dotSize","barHeight","isRtl","navigationIndex","bottom","inputRange","map","_","index","outputRange","length","translateX","translateY","HEIGHT_HOLE","opacity","iconContainerStyle","value","justifyContent","alignItems","dotStyle","backgroundColor","height","borderRadius","transform","styles","dot","icon","focused","Dot","isEqual"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { memo, useMemo } from 'react';\nimport isEqual from 'react-fast-compare';\nimport Animated, { useAnimatedStyle } from 'react-native-reanimated';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { useInterpolate } from '../../AnimatedHelper';\nimport type { DotProps } from '../../types';\nimport { HEIGHT_HOLE } from '../constant';\nimport { IconDot } from './IconDot';\nimport { styles } from './style';\n\nconst DotComponent = (props: DotProps) => {\n  // props\n  const {\n    selectedIndex,\n    routes,\n    progress,\n    width,\n    dotColor,\n    dotSize,\n    barHeight,\n    isRtl,\n    navigationIndex,\n  } = props;\n\n  // const\n  const { bottom } = useSafeAreaInsets();\n  const inputRange = useMemo(\n    () => routes.map((_: any, index: number) => index),\n    [routes]\n  );\n  const outputRange = useMemo(\n    () =>\n      isRtl\n        ? routes.map(\n            (_: any, index: number) =>\n              -(\n                (index * width) / routes.length +\n                width / routes.length / 2 -\n                dotSize / 2\n              )\n          )\n        : routes.map(\n            (_: any, index: number) =>\n              (index * width) / routes.length +\n              width / routes.length / 2 -\n              dotSize / 2\n          ),\n    [isRtl, routes, width, dotSize]\n  );\n\n  // reanimated\n  const translateX = useInterpolate(selectedIndex, inputRange, outputRange);\n  const translateY = useInterpolate(\n    progress,\n    [0, 1],\n    [15 - bottom, -(barHeight - HEIGHT_HOLE + 5)]\n  );\n\n  const opacity = useInterpolate(progress, [0, 1], [0.2, 1]);\n\n  // reanimated style\n  const iconContainerStyle = useAnimatedStyle(() => ({\n    opacity: opacity.value,\n    justifyContent: 'center',\n    alignItems: 'center',\n  }));\n\n  const dotStyle = useAnimatedStyle(() => ({\n    width: dotSize,\n    backgroundColor: dotColor,\n    height: dotSize,\n    bottom: 0,\n    borderRadius: dotSize / 2,\n    transform: [\n      { translateX: translateX.value },\n      { translateY: translateY.value },\n    ],\n  }));\n\n  // render\n  return (\n    <Animated.View style={[styles.dot, dotStyle]}>\n      <Animated.View style={iconContainerStyle}>\n        {routes.map(({ icon }, index: number) => (\n          <IconDot key={index} index={index} selectedIndex={selectedIndex}>\n            {icon({ progress, focused: navigationIndex === index })}\n          </IconDot>\n        ))}\n      </Animated.View>\n    </Animated.View>\n  );\n};\n\nexport const Dot = memo(DotComponent, isEqual);\n"]}