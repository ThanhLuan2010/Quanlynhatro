{"version":3,"sources":["AnimatedTabBar.tsx"],"names":["Animated","addWhitelistedNativeProps","width","stroke","backgroundColor","AnimatedTabBarComponent","props","navigation","tabs","descriptors","state","duration","DEFAULT_ITEM_ANIMATION_DURATION","barColor","TAB_BAR_COLOR","dotSize","SIZE_DOT","barHeight","TAB_BAR_HEIGHT","dotColor","titleShown","barWidth","routes","index","navigationIndex","key","navigationKey","selectedIndex","getRouteTitle","route","options","tabBarLabel","undefined","title","name","getRouteTabConfigs","getRoutes","map","handleSelectedIndexChange","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","CommonActions","navigate","value","nextSelected","prevSelected","I18nManager","isRTL","AnimatedTabBar","isEqual"],"mappings":"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","sourcesContent":["import React, { memo, useCallback, useEffect, useMemo } from 'react';\nimport { I18nManager } from 'react-native';\nimport isEqual from 'react-fast-compare';\nimport type { BottomTabBarProps } from '@react-navigation/bottom-tabs';\nimport { CommonActions, Route } from '@react-navigation/native';\nimport Animated, {\n  runOnJS,\n  useAnimatedReaction,\n  useSharedValue,\n} from 'react-native-reanimated';\nimport {\n  DEFAULT_ITEM_ANIMATION_DURATION,\n  SIZE_DOT,\n  TAB_BAR_COLOR,\n  TAB_BAR_HEIGHT,\n} from './curved/constant';\nimport { CurvedTabBar } from './curved/CurvedTabBar';\nimport type {\n  TabBarAnimationConfigurableProps,\n  TabsConfigsType,\n} from './types';\n\nAnimated.addWhitelistedNativeProps({\n  width: true,\n  stroke: true,\n  backgroundColor: true,\n});\n\ninterface AnimatedTabBarProps\n  extends BottomTabBarProps,\n    TabBarAnimationConfigurableProps {\n  /**\n   * Tabs configurations.\n   */\n  tabs: TabsConfigsType;\n\n  /**\n   * Overwrite background color of tabbar\n   */\n  barColor?: string;\n\n  /**\n   * Overwrite radius of dot\n   */\n  dotSize?: number;\n\n  /**\n   * Overwrite height of tabbar\n   */\n  barHeight?: number;\n  /**\n   * Overwrite width of tabbar\n   */\n  barWidth?: number;\n\n  /**\n   * Custom dot color\n   */\n  dotColor?: string;\n\n  /**\n   * Show title or not\n   * @default false\n   */\n  titleShown?: boolean;\n}\nconst AnimatedTabBarComponent = (props: AnimatedTabBarProps) => {\n  // props\n  const {\n    navigation,\n    tabs,\n    descriptors,\n    state,\n    duration = DEFAULT_ITEM_ANIMATION_DURATION,\n    barColor = TAB_BAR_COLOR,\n    dotSize = SIZE_DOT,\n    barHeight = TAB_BAR_HEIGHT,\n    dotColor = TAB_BAR_COLOR,\n    titleShown = false,\n    barWidth,\n  } = props;\n\n  // variables\n\n  const {\n    routes,\n    index: navigationIndex,\n    key: navigationKey,\n  } = useMemo(() => {\n    return state;\n  }, [state]);\n\n  // reanimated\n  const selectedIndex = useSharedValue(0);\n\n  // callbacks\n  const getRouteTitle = useCallback(\n    (route: Route<string>) => {\n      const { options } = descriptors[route.key];\n      // eslint-disable-next-line no-nested-ternary\n      return options.tabBarLabel !== undefined &&\n        typeof options.tabBarLabel === 'string'\n        ? options.tabBarLabel\n        : options.title !== undefined\n        ? options.title\n        : route.name;\n    },\n    [descriptors]\n  );\n\n  const getRouteTabConfigs = useCallback(\n    (route: Route<string>) => {\n      return tabs[route.name];\n    },\n    [tabs]\n  );\n\n  const getRoutes = useCallback(() => {\n    return routes.map((route) => ({\n      key: route.key,\n      title: getRouteTitle(route),\n      ...getRouteTabConfigs(route),\n    }));\n  }, [routes, getRouteTitle, getRouteTabConfigs]);\n\n  const handleSelectedIndexChange = useCallback(\n    (index: number) => {\n      const { key, name } = routes[index];\n      const event = navigation.emit({\n        type: 'tabPress',\n        target: key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...CommonActions.navigate(name),\n          target: navigationKey,\n        });\n      }\n    },\n    [routes, navigation, navigationKey]\n  );\n\n  // effects\n  useEffect(() => {\n    selectedIndex.value = navigationIndex;\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [navigationIndex]);\n\n  useAnimatedReaction(\n    () => selectedIndex.value,\n    (nextSelected, prevSelected) => {\n      if (nextSelected !== prevSelected) {\n        runOnJS(handleSelectedIndexChange)(nextSelected);\n      }\n    },\n    [selectedIndex, handleSelectedIndexChange]\n  );\n\n  // render\n  return (\n    <CurvedTabBar\n      isRtl={I18nManager.isRTL}\n      barWidth={barWidth}\n      titleShown={titleShown}\n      dotColor={dotColor}\n      barHeight={barHeight}\n      dotSize={dotSize}\n      tabBarColor={barColor}\n      selectedIndex={selectedIndex}\n      navigationIndex={navigationIndex}\n      routes={getRoutes()}\n      duration={duration}\n    />\n  );\n};\nexport const AnimatedTabBar = memo(AnimatedTabBarComponent, isEqual);\n"]}